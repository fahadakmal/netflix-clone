{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mac/development /nutflix/nutflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mac/development /nutflix/nutflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/mac/development /nutflix/nutflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from'movie-trailer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original\";var opts={height:'390',width:'100%',playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var Row=function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer(movie.name||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(e){console.log(e);});}};console.log(movies);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"\".concat(isLargeRow===false?\"row_poster\":\"row_posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});};export default Row;","map":{"version":3,"sources":["/Users/mac/development /nutflix/nutflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","opts","height","width","playerVars","autoplay","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","e","console","log","map","poster_path","backdrop_path","id"],"mappings":"udAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CACA,GAAMC,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACV;AACAC,QAAQ,CAAE,CAFA,CAHD,CAAb,CASA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAqC,IAAlCC,CAAAA,KAAkC,MAAlCA,KAAkC,CAA3BC,QAA2B,MAA3BA,QAA2B,CAAjBC,UAAiB,MAAjBA,UAAiB,CAC/C,cAA4Bd,QAAQ,CAAC,EAAD,CAApC,wCAAOe,MAAP,eAAeC,SAAf,eACA,eAAoChB,QAAQ,CAAC,EAAD,CAA5C,yCAAOiB,UAAP,eAAmBC,aAAnB,eAGAjB,SAAS,CAAC,UAAM,SACCkB,CAAAA,SADD,qIACd,qKACwBjB,CAAAA,KAAK,CAACkB,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACN,QAAD,CAPM,CAAT,CASA,GAAMW,CAAAA,WAAW,CAAC,QAAZA,CAAAA,WAAY,CAACC,KAAD,CAClB,CACE,GAAGR,UAAH,CAAc,CACZC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEK,CACHd,YAAY,CAACqB,KAAK,CAACC,IAAN,EAAc,EAAf,CAAZ,CAA+BC,IAA/B,CAAoC,SAAAC,GAAG,CAAG,CACtC,GAAMC,CAAAA,SAAS,CAAC,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAhB,CACAd,aAAa,CAACW,SAAS,CAACT,GAAV,CAAc,GAAd,CAAD,CAAb,CACH,CAHD,EAGGa,KAHH,CAGS,SAACC,CAAD,CAAK,CACpBC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACO,CALD,EAMD,CAEF,CAbD,CAeAC,OAAO,CAACC,GAAR,CAAYrB,MAAZ,EACA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAMH,KAAN,EADF,cAEE,YAAK,SAAS,CAAC,aAAf,UACGG,MAAM,CAACsB,GAAP,CAAW,SAACZ,KAAD,qBACV,YAEE,OAAO,CAAE,yBAAID,CAAAA,WAAW,CAACC,KAAD,CAAf,EAFX,CAGE,SAAS,WAAKX,UAAU,GAAI,KAAd,CAAsB,YAAtB,CAAqC,iBAA1C,CAHX,CAIE,GAAG,WAAKT,QAAL,SACDS,UAAU,CAAGW,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aADtC,CAJL,CAOE,GAAG,CAAEd,KAAK,CAACC,IAPb,EACOD,KAAK,CAACe,EADb,CADU,EAAX,CADH,EAFF,CAeGvB,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEX,IAApC,EAfjB,GADF,CAmBD,CAjDD,CAmDA,cAAeK,CAAAA,GAAf","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst opts = {\n  height: '390',\n  width: '100%',\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick=(movie)=>\n  {\n    if(trailerUrl){\n      setTrailerUrl(\"\");\n    }else{\n      movieTrailer(movie.name || \"\").then(url =>{\n          const urlParams=new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n      }).catch((e)=>{\nconsole.log(e);\n      })\n    }\n\n  }\n\n  console.log(movies);\n  return (\n    <div className=\"row\">\n      <h2 >{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={()=>handleClick(movie)}\n            className={`${isLargeRow ===false ? \"row_poster\" : \"row_posterLarge\" }`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}  />}\n    </div>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}