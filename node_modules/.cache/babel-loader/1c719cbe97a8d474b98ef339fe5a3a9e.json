{"ast":null,"code":"var _jsxFileName = \"/Users/mac/development /nutflix/nutflix/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst opts = {\n  height: '390',\n  width: '100%',\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1\n  }\n};\n\nconst Row = ({\n  title,\n  fetchUrl,\n  isLargeRow\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie.name || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  };\n\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `${isLargeRow === false ? \"row_poster\" : \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/mac/development /nutflix/nutflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","opts","height","width","playerVars","autoplay","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","e","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;AACA,MAAMC,IAAI,GAAG;AACXC,EAAAA,MAAM,EAAE,KADG;AAEXC,EAAAA,KAAK,EAAE,MAFI;AAGXC,EAAAA,UAAU,EAAE;AACV;AACAC,IAAAA,QAAQ,EAAE;AAFA;AAHD,CAAb;;AASA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAqC;AAAA;;AAC/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAekB,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;;AASA,QAAMW,WAAW,GAAEC,KAAD,IAClB;AACE,QAAGR,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEK;AACHd,MAAAA,YAAY,CAACqB,KAAK,CAACC,IAAN,IAAc,EAAf,CAAZ,CAA+BC,IAA/B,CAAoCC,GAAG,IAAG;AACtC,cAAMC,SAAS,GAAC,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAhB;AACAd,QAAAA,aAAa,CAACW,SAAS,CAACR,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OAHD,EAGGY,KAHH,CAGUC,CAAD,IAAK;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACO,OALD;AAMD;AAEF,GAbD;;AAeAC,EAAAA,OAAO,CAACC,GAAR,CAAYrB,MAAZ;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAMH;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAACsB,GAAP,CAAYZ,KAAD,iBACV;AAEE,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAF1B;AAGE,QAAA,SAAS,EAAG,GAAEX,UAAU,KAAI,KAAd,GAAsB,YAAtB,GAAqC,iBAAmB,EAHxE;AAIE,QAAA,GAAG,EAAG,GAAET,QAAS,GACfS,UAAU,GAAGW,KAAK,CAACa,WAAT,GAAuBb,KAAK,CAACc,aACxC,EANH;AAOE,QAAA,GAAG,EAAEd,KAAK,CAACC;AAPb,SACOD,KAAK,CAACe,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAeGvB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEX;AAApC;AAAA;AAAA;AAAA;AAAA,YAfjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAjDD;;GAAMK,G;;KAAAA,G;AAmDN,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst opts = {\n  height: '390',\n  width: '100%',\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick=(movie)=>\n  {\n    if(trailerUrl){\n      setTrailerUrl(\"\");\n    }else{\n      movieTrailer(movie.name || \"\").then(url =>{\n          const urlParams=new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n      }).catch((e)=>{\nconsole.log(e);\n      })\n    }\n\n  }\n\n  console.log(movies);\n  return (\n    <div className=\"row\">\n      <h2 >{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={()=>handleClick(movie)}\n            className={`${isLargeRow ===false ? \"row_poster\" : \"row_posterLarge\" }`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}  />}\n    </div>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}